import os
import random

import aiofiles
from aiogram import types
from aiogram.dispatcher import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from buttons.admin import AdminButtons
from data.config import admins
from db.db import session_db
from db.models import Events


@session_db
async def events(message: types.Message, session: AsyncSession, edit=False):
    if message.chat.id in admins:
        text = "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        markup = await AdminButtons.events(session)

        if edit:
            await message.edit_text(text, parse_mode="HTML", reply_markup=markup)
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=markup)


async def event_add(message: types.Message, state: FSMContext):
    markup = AdminButtons.close()
    await message.delete()
    await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –ø—Ä–∏–º–µ—Ä - 1.09.23 –ú–æ—Å–∫–≤–∞ - –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                         reply_markup=markup)
    await state.update_data(event_id=random.randint(1, 999999))
    await state.set_state("event_write_title")


async def event_write_title(message: types.Message, state: FSMContext):
    if message.content_type == "text":
        if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await events(message)
        else:
            await message.answer("‚úè –°–∫–∏–Ω—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            await state.update_data(title=message.text)
            await state.set_state("event_write_photo")
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def event_write_photo(message: types.Message, state: FSMContext):
    if message.content_type == "text":
        if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await events(message)
    elif message.content_type == "photo":
        photo = message.photo[-1]  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π (–Ω–∞–∏–±–æ–ª—å—à–µ–π) –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        file_id = photo.file_id

        data = await state.get_data()

        file_path = f"data/events_photo/{data['event_id']}.jpg"  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ file_id
        file = await message.bot.download_file_by_id(file_id)

        async with aiofiles.open(file_path, mode='wb') as f:
            await f.write(file.read())

        await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.set_state("events_write_text")
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def events_write_text(message: types.Message, state: FSMContext):
    if message.content_type == "text":
        if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await events(message)
        else:

            if len(message.text) > 1024:
                return await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 1024 –±–∞–π—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

            await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, 0 - –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
            await state.update_data(text=message.text)
            await state.set_state("event_write_price")
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def event_write_price(message: types.Message, state: FSMContext):
    if message.content_type == "text":
        if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await events(message)
        else:
            if not message.text.isnumeric():
                return await message.answer("‚ùå –¶–µ–Ω—É –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

            await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏")
            await state.update_data(price=int(message.text))
            await state.set_state("event_write_success")
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def event_write_success(message: types.Message, state: FSMContext):
    if message.content_type == "text":
        if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await events(message)
        else:
            if len(message.text) > 1024:
                return await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 1024 –±–∞–π—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

            await state.update_data(text_success=message.text)
            await events_commit(message, state)
            await delete_events_photo()
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@session_db
async def delete_events_photo(session: AsyncSession):

    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    """

    all_events = await Events.get_all_events(session)
    all_events_list = []

    for i in all_events:
        all_events_list.append(i.event_id)

    photo_folder = "data/events_photo"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
    all_photos = [f for f in os.listdir(photo_folder) if os.path.isfile(os.path.join(photo_folder, f))]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    photos_to_delete = [photo for photo in all_photos if int(photo.split(".")[0]) not in all_events_list]

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    for photo in photos_to_delete:
        photo_path = os.path.join(photo_folder, photo)
        try: os.remove(photo_path)
        except: pass




@session_db
async def events_commit(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()

    event_id = data["event_id"]
    title = data["title"]
    text = data["text"]
    price = data["price"]
    text_success = data["text_success"]

    await Events.register(event_id, title, text, price, text_success, session)

    await state.finish()

    await events(message)
