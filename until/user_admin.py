from aiogram import types
from aiogram.dispatcher import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from buttons.admin import UserPanel
from data.config import admins, packets
from db.db import session_db
from db.models import Person
from fun.view import by_packet_view
from until import update_title


async def admin_panel_user(message: types.Message, user_id: str, session: AsyncSession, edit=False):
    """
    –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.chat.id not in admins:
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    if not user_id.isnumeric():
        return message.answer("‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    user_id = int(user_id)

    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if not await Person.is_register(user_id, session):
        return message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ")

    person = await Person.obj(user_id, session)

    text = f"""
üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
UserID: {person.user_id}
–ò–º—è: {person.first_name}
Username: @{person.username}
–¢–µ–ª–µ—Ñ–æ–Ω: {person.phone}
–ì–æ—Ä–æ–¥: {person.city}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {person.data_register}

ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ—Ç–µ
–ü–∞–∫–µ—Ç: {person.packet}
ReferID: {person.refer}

üí∞ –§–∏–Ω–∞–Ω—Å—ã 
–ë–∞–ª–∞–Ω—Å: {person.balance} AS
–õ–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {person.balance_all_time} AS
–ë–∞–ª–∞–Ω—Å –ë–∞–Ω–∫–∏: {person.balance_bank+person.balance_buffer_bank} AS
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –±–∞–Ω–∫–∏: {person.balance_all_time_bank} AS
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏: {person.balance_all_time_partner} AS

üë• –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ 
–ó–≤–∞–Ω–∏–µ: {person.status}

–û–±–æ—Ä–æ—Ç –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏: {person.turnover_first_line} AS
–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {person.total_turnover} AS

–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1 –ª–∏–Ω–∏–∏: {person.one_line_referrals}
–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2 –ª–∏–Ω–∏–∏: {person.two_line_referrals}
–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3 –ª–∏–Ω–∏–∏: {person.three_line_referrals}
–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 4 –ª–∏–Ω–∏–∏: {person.four_line_referrals}
–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 5 –ª–∏–Ω–∏–∏: {person.five_line_referrals}
    
    """

    markup = UserPanel.panel(user_id)

    if edit:
        await message.edit_text(text, reply_markup=markup)
    else:
        await message.answer(text, reply_markup=markup)


async def user_panel_add(message: types.Message, user_id: int, state: FSMContext):
    await message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å\n–ù–∞–∂–º–∏—Ç–µ /CANCEL –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    await state.update_data(user_id=user_id)
    await state.set_state("user_panel_add_commit")


@session_db
async def user_panel_add_commit(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.content_type == "text":

        data = await state.get_data()
        user_id = int(data['user_id'])

        if message.text == "/CANCEL":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
        else:
            if not message.text.isnumeric():
                return await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

            person = await Person.obj(user_id, session)
            person.balance = person.balance + int(message.text)
            await session.commit()
            await message.bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ +{message.text} AS –∫–æ–º–∞–Ω–¥–æ–π ASTERI CLUB")
            await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å {person.first_name} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ +{message.text} AS")
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def user_panel_minus(message: types.Message, user_id: int, state: FSMContext):
    await message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å\n–ù–∞–∂–º–∏—Ç–µ /CANCEL –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    await state.update_data(user_id=user_id)
    await state.set_state("user_panel_minus_commit")


@session_db
async def user_panel_minus_commit(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.content_type == "text":

        data = await state.get_data()
        user_id = int(data['user_id'])

        if message.text == "/CANCEL":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
        else:
            if not message.text.isnumeric():
                return await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

            person = await Person.obj(user_id, session)
            person.balance = person.balance - int(message.text)
            await session.commit()
            await message.bot.send_message(user_id, f"‚ô¶ –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {message.text} AS –∫–æ–º–∞–Ω–¥–æ–π ASTERI CLUB")
            await message.answer(f"‚ô¶ –ë–∞–ª–∞–Ω—Å {person.first_name} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {message.text} AS")
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def user_panel_bank_balance_add(message: types.Message, user_id: int, state: FSMContext):

    await message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–ø–∏–ª–∫–∏\n–ù–∞–∂–º–∏—Ç–µ /CANCEL –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    await state.update_data(user_id=user_id)
    await state.set_state("user_panel_bank_add_commit")



@session_db
async def user_panel_bank_add_commit(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.content_type == "text":

        data = await state.get_data()
        user_id = int(data['user_id'])

        if message.text == "/CANCEL":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
        else:
            if not message.text.isnumeric():
                return await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

            person = await Person.obj(user_id, session)
            person.balance_buffer_bank = person.balance_buffer_bank + int(message.text)
            await session.commit()
            await message.bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –∫–æ–ø–∏–ª–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ +{message.text} AS –∫–æ–º–∞–Ω–¥–æ–π ASTERI CLUB")
            await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ–ø–∏–ª–∫–∏ {person.first_name} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ +{message.text} AS")
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def user_panel_bank_balance_minus(message: types.Message, user_id: int, state: FSMContext):

    await message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–ø–∏–ª–∫–∏\n–ù–∞–∂–º–∏—Ç–µ /CANCEL –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    await state.update_data(user_id=user_id)
    await state.set_state("user_panel_bank_minus_commit")


@session_db
async def user_panel_bank_minus_commit(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.content_type == "text":

        data = await state.get_data()
        user_id = int(data['user_id'])

        if message.text == "/CANCEL":
            await message.answer("üö´ –û—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
        else:
            if not message.text.isnumeric():
                return await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

            person = await Person.obj(user_id, session)
            money = int(message.text)

            person.balance_buffer_bank = person.balance_buffer_bank - money
            if person.balance_buffer_bank < 0:
                person.balance_bank = person.balance_bank + person.balance_buffer_bank
                person.balance_buffer_bank = 0

            await session.commit()

            await message.bot.send_message(user_id, f"‚ô¶ –í–∞—à –±–∞–ª–∞–Ω—Å –∫–æ–ø–∏–ª–∫–∏ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {message.text} AS –∫–æ–º–∞–Ω–¥–æ–π ASTERI CLUB")
            await message.answer(f"‚ô¶ –ë–∞–ª–∞–Ω—Å –∫–æ–ø–∏–ª–∫–∏ {person.first_name} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {message.text} AS")
            await state.finish()
            await admin_panel_user(message, str(user_id), session)
    else:
        await message.answer("‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def packet(message: types.Message, user_id: int, state: FSMContext, session: AsyncSession):
    await state.update_data(user_id=user_id)

    person = await Person.obj(user_id, session)

    packets_list = list(packets.keys())
    packets_list[packets_list.index(person.packet)] = person.packet + " ‚úÖ"

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    markup = UserPanel.set_packet(user_id, packets_list)

    await message.edit_text(text, reply_markup=markup)


async def set_packet(message: types.Message, user_id: int, packet_name: str, state: FSMContext, session: AsyncSession):

    person = await Person.obj(user_id, session)

    person.packet = packet_name

    if packet_name != "FREE":
        await by_packet_view(user_id, packet_name)
        await update_title(person, session)

    await session.commit()

    await packet(message, user_id, state, session)



