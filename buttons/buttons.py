from aiogram import types
from sqlalchemy.ext.asyncio import AsyncSession

from data.config import packets, AS, installment_plan
from db.models import Person, Events
from until import format_number

class Button:


    @staticmethod
    def about_bot():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        b1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å ‚úÖ")
        markup.add(b1)
        return markup

    @staticmethod
    def send_number():
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        b1 = types.KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(b1)
        return markup

    @staticmethod
    def user_agreement():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        b1 = types.KeyboardButton("‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é")
        markup.add(b1)
        return markup

    @staticmethod
    def menu():
        markup = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
        b1 = types.InlineKeyboardButton("–ö–æ—à–µ–ª–µ–∫ üíº", callback_data="wallet")
        b2 = types.InlineKeyboardButton("–ö–æ–ø–∏–ª–∫–∞ üí∞", callback_data="bank")
        b3 = types.InlineKeyboardButton("–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞ ‚öñ", callback_data="partner_program")
        b4 = types.InlineKeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üéü", callback_data="events")
        b5 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ", callback_data="information")
        b6 = types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öô", url="https://t.me/AsteriSupport")
        markup.add(b1, b2, b3, b4, b5, b6)
        return markup

    @staticmethod
    async def get_markup_wallet(message: types.Message, session: AsyncSession):

        person = await Person.obj(message.chat.id, session)

        if person.packet == "FREE":
            b1 = types.InlineKeyboardButton("üìò –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ AS-–ø–∞–∫–µ—Ç", callback_data="by_packet")
        elif person.packet == "LITE":
            b1 = types.InlineKeyboardButton("üìò –ê–ü–ì–†–ï–ô–î", callback_data="by_packet")
        elif person.packet == "PRO":
            b1 = types.InlineKeyboardButton("üìò –ê–ü–ì–†–ï–ô–î", callback_data="by_packet")
        else:
            b1 = types.InlineKeyboardButton("–õ–ò–ß–ù–û–ï –ù–ê–°–¢–ê–í–ù–ò–ß–ï–°–¢–í–û", url="https://forms.yandex.ru/u/64f79e2cd046884dedf64a91")

        b2 = types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="wallet_add_money")
        b3 = types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="leave_money")
        b4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu")

        markup = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(b1); markup.add(b2, b3); markup.add(b4)
        return markup

    @staticmethod
    async def by_packet(message: types.Message, session: AsyncSession):

        person = await Person.obj(message.chat.id, session)

        packet = ["FREE", "LITE", "PRO", "VIP"]

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)

        for pc_name in packet[packet.index(person.packet)+1:]:
            markup.add(types.InlineKeyboardButton(f'–ü–ê–ö–ï–¢ "ASTERI {pc_name}"', callback_data=f"by_packet__{pc_name}"))

        markup.add(types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data=f"wallet"))

        return markup

    @staticmethod
    async def by_packet_panel(packet: str):

        b1 = types.InlineKeyboardButton("–ü–û–õ–ù–ê–Ø –û–ü–õ–ê–¢–ê –í AS", callback_data=f"full_pay_usdt_{packet}")
        b2 = types.InlineKeyboardButton("–ü–û–õ–ù–ê–Ø –û–ü–õ–ê–¢–ê –í RUB", callback_data=f"full_pay_rub_{packet}")
        b3 = types.InlineKeyboardButton("–†–ê–°–°–†–û–ß–ö–ê –í RUB", callback_data=f"installment_rub_{packet}")
        b4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="by_packet")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2, b3, b4)
        return markup

    @staticmethod
    async def full_pay_usdt(packet: str):

        b1 = types.InlineKeyboardButton(f"‚úÖ –ü–†–ò–û–ë–†–ï–°–¢–ò –ü–ê–ö–ï–¢ ‚Äú{packet}‚Äù", callback_data=f"confirm_by_packet_{packet}")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"by_packet__{packet}")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup

    @staticmethod
    async def full_pay_rub(packet: str, url: str):

        b1 = types.InlineKeyboardButton(f"–ü–µ—Ä–µ–π—Ç–∏", url=url)
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"by_packet__{packet}")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup


    @staticmethod
    async def confirm_by_packet_success():
        b1 = types.InlineKeyboardButton(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data=f"menu")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1)
        return markup


    @staticmethod
    async def confirm_by_packet_error():
        b1 = types.InlineKeyboardButton(f"üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"wallet_add_money")
        b2 = types.InlineKeyboardButton(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data=f"menu")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup

    @staticmethod
    async def installment_rub(message: types.Message, packet: str, session: AsyncSession):

        person = await Person.obj(message.chat.id, session)

        all_sum = packets[packet] - packets[person.packet]

        list_urls = installment_plan[f"{person.packet}_{packet}"]

        b1 = types.InlineKeyboardButton(f"–ü–ª–∞—Ç–µ–∂ {format_number(int((all_sum*AS)/10))} —Ä—É–±/–º–µ—Å (10 –º–µ—Å—è—Ü–µ–≤)", url=list_urls[0])
        b2 = types.InlineKeyboardButton(f"–ü–ª–∞—Ç–µ–∂ {format_number(int((all_sum*AS)/6))} —Ä—É–±/–º–µ—Å (6 –º–µ—Å—è—Ü–µ–≤)", url=list_urls[1])
        b3 = types.InlineKeyboardButton(f"–ü–ª–∞—Ç–µ–∂ {format_number(int((all_sum*AS)/4))} —Ä—É–±/–º–µ—Å (4 –º–µ—Å—è—Ü–µ–≤)", url=list_urls[2])
        b4 = types.InlineKeyboardButton(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url="https://t.me/AsteriSupport")
        b5 = types.InlineKeyboardButton(f"‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"by_packet__{packet}")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2, b3, b4, b5)
        return markup


    @staticmethod
    async def add_money():
        b1 = types.InlineKeyboardButton(f"‚úè –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤—ã–≤–æ–¥–∞", callback_data=f"write_add_money")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"wallet")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup

    @staticmethod
    async def add_money_commit(url: str):
        b1 = types.InlineKeyboardButton(f"–ü–µ—Ä–µ–π—Ç–∏", url=url)
        b2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data=f"menu")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup

    @staticmethod
    async def leave_money():
        b1 = types.InlineKeyboardButton(f"‚úè –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤—ã–≤–æ–¥–∞", callback_data=f"write_leave_money")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"wallet")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup

    @staticmethod
    def write_wallet():
        b1 = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")

        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        markup.add(b1)
        return markup

    @staticmethod
    def leave_money_true():
        b1 = types.InlineKeyboardButton(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data=f"menu")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1)
        return markup


    @staticmethod
    def leave_money_not_balance():
        b1 = types.InlineKeyboardButton(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url="https://t.me/AsteriSupport")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"wallet")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup

    @staticmethod
    def information():

        b1 = types.InlineKeyboardButton(f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è üë©üèΩ‚Äçüíª", callback_data=f"presentation")
        b2 = types.InlineKeyboardButton(f"–°—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã üí¨", callback_data=f"urls_chats")
        b3 = types.InlineKeyboardButton(f"–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ üí∏", callback_data=f"advance")
        b4 = types.InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=f"edit_city")
        b5 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data=f"menu")

        markup = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(b1, b2); markup.add(b3, b4); markup.add(b5)
        return markup


    @staticmethod
    def presentation():

        b1 = types.InlineKeyboardButton(f"–°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", url="https://disk.yandex.ru/d/8SzP6nQ2UODfRA")
        b2 = types.InlineKeyboardButton(f"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/AsteriSupport")
        b3 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"information")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2, b3)
        return markup

    @staticmethod
    def urls_chats():
        b1 = types.InlineKeyboardButton(f"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/AsteriSupport")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"information")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2)
        return markup

    @staticmethod
    def advance():
        b1 = types.InlineKeyboardButton(f"–®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è", url="https://disk.yandex.ru/d/8SzP6nQ2UODfRA")
        b2 = types.InlineKeyboardButton(f"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/AsteriSupport")
        b3 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"information")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2, b3)
        return markup

    @staticmethod
    def partner_program():
        b1 = types.InlineKeyboardButton(f"–°–ö–ê–ß–ê–¢–¨ PDF-–ü–†–ï–ó–ï–ù–¢–ê–¶–ò–Æ", url="https://disk.yandex.ru/d/8SzP6nQ2UODfRA")
        b2 = types.InlineKeyboardButton(f"–í–ò–î–ï–û-–û–ë–£–ß–ï–ù–ò–ï", url="https://www.youtube.com/playlist?list=PLu6vOyQnv6Vy65mcBdfiw85n88dSxkR-x")
        b3 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data=f"menu")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2, b3)
        return markup


    @staticmethod
    def bank():
        b1 = types.InlineKeyboardButton(f"üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"add_bank")
        b2 = types.InlineKeyboardButton(f"üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data=f"leave_bank")
        b3 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data=f"menu")

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(b1, b2, b3)
        return markup

    @staticmethod
    def add_bank():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        b1 = types.KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")
        markup.add(b1)
        return markup

    @staticmethod
    def bank_add_true(number: int):
        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        b1 = types.InlineKeyboardButton("‚úÖ –ü–û–ü–û–õ–ù–ò–¢–¨ –ö–û–ü–ò–õ–ö–£", callback_data=f"bank_add_commit_{number}")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="bank_not_edit")
        markup.add(b1, b2)
        return markup

    @staticmethod
    def bank_add_commit():
        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        b1 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data="menu_bank")
        markup.add(b1)
        return markup

    @staticmethod
    def add_bank_not_balance():
        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        b1 = types.InlineKeyboardButton(f"üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"wallet_add_money")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="bank_not_edit")
        markup.add(b1, b2)
        return markup

    @staticmethod
    def bank_leave_true(number: int):
        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        b1 = types.InlineKeyboardButton("‚úÖ –í—ã–≤–µ—Å—Ç–∏ AS –∏–∑ –∫–æ–ø–∏–ª–∫–∏", callback_data=f"bank_leave_commit_{number}")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="bank_not_edit")
        markup.add(b1, b2)
        return markup


    @staticmethod
    def leave_bank_not_balance():
        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        b1 = types.InlineKeyboardButton(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url="https://t.me/AsteriSupport")
        b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="bank_not_edit")
        markup.add(b1, b2)
        return markup

    @staticmethod
    async def events(session: AsyncSession):

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)

        list_buttons = await Events.get_events(session)

        for event in list_buttons:
            markup.add(types.InlineKeyboardButton(event.name, callback_data=f"event_code_{event.event_id}"))

        b2 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data="menu")
        markup.add(b2)
        return markup


    @staticmethod
    async def event_code(price: int, is_sub: bool, event_id: int):

        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)

        if is_sub:
            b1 = types.InlineKeyboardButton("‚úÖ –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã", callback_data=f"event_view_success_{event_id}")
        elif price == 0:
            b1 = types.InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"event_by_{event_id}")
        else:
            b1 = types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"event_by_{event_id}")

        b2 = types.InlineKeyboardButton(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", url="https://t.me/AsteriSupport")
        b3 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="events")
        markup.add(b1, b2, b3)
        return markup

    @staticmethod
    async def event_by(price: int, event_id: int):
        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)

        b1 = types.InlineKeyboardButton("‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data=f"event_commit_{event_id}")

        if price == 0:
            b2 = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"event_code_{event_id}")
        else:
            b2 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"event_code_{event_id}")

        markup.add(b1, b2)
        return markup

    @staticmethod
    def event_commit():
        markup = types.InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
        b1 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤", callback_data="menu")
        markup.add(b1)
        return markup



